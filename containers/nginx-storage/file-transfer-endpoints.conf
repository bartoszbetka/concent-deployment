
    location /download/ {
        limit_except        GET { deny all; }
        auth_request        /download-auth/;
        if ($request_uri ~ "/download/(.*)") {
            set $download_url $1;
        }
        alias /srv/storage/;
    }

    location /download-auth/ {
        internal;
        proxy_pass                $gatekeeper_api_backend/gatekeeper/download-auth/$download_url;
        proxy_pass_request_body   off;
        proxy_set_header          Content-Length "";
    }


    location = /upload/ {
        auth_request     /upload-auth/;
        auth_request_set $checksum $upstream_http_concent_file_checksum;
        auth_request_set $size     $upstream_http_concent_file_size;

        access_by_lua_block {
            local file_transfer_endpoints = require('file-transfer-endpoints')

            file_transfer_endpoints.validate_upload_request()

        }

        try_files $uri @upload-internal;
    }

    location /upload-auth/ {
          internal;
          proxy_method      POST;
          proxy_pass        $gatekeeper_api_backend/gatekeeper/upload-auth/$http_concent_upload_path;
          proxy_set_header  Concent-Upload-Path "";
          proxy_set_header  Content-Length "";
    }

    location @upload-internal {
        lua_code_cache   on;
        set $storage     backend_file;
        set $bu_checksum on;
        set $bu_sha1     on;

        set $file_storage_path /srv/storage;
        set $backend_url       /result/;
        set $package_path      '/opt/nginx-big-upload/lib/?.lua';
        content_by_lua_file    /opt/nginx-big-upload/lib/big-upload.lua;

    }

    location /result/ {
        internal;
        access_log off;

        content_by_lua_block {
            ngx.exec("@upload-result")
        }
    }

    location @upload-result {
        content_by_lua_block {

            local file_transfer_endpoints = require('file-transfer-endpoints')

            file_transfer_endpoints.validate_uploaded_file()
            file_transfer_endpoints.create_upload_location()
            file_transfer_endpoints.report_upload()
            file_transfer_endpoints.return_upload_success()

        }

    }
